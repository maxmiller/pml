[comment encoding = UTF-8 /]
[module multiplexor_h('/PML/model/pml.ecore')]

[import PMLGen::generator::pmlutil /]

[template public generateElement(c : Multiplexor)]
	[file (c.name.concat('_untimed.h'), false, 'UTF-8')]
	#ifndef [c.name.concat('_h')/]
	#define  [c.name.concat('_h')/]
	#include "systemc.h"
	
	SC_MODULE([c.name/]){
	 	[for (p : Input | c.inmux)]
	    	[forIn(p.name, p.type.toString(), p.bit, p.length) /]	    
	    [/for]
        [for (p : Output | c.outmux)]
	    	[forOut(p.name, p.type.toString(), p.bit, p.length) /]	    
	    [/for]
		[for (p : Seletor | c.seletormux)]
	    	[forSel(p.name, p.type.toString(), p.bit) /]	    
	    [/for]
        [for (o : Behavior | c.behaviormux)]
        	[o.typeBehavior.toString().toLower()/] [o.name.toLower()/](); 
        [/for]
        
		SC_CTOR([c.name/]) {
        
			[for (o : Behavior | c.behaviormux)]
	        	SC_METHOD([o.name.toLower()/]); 
	        [/for]
			[for (p : Input | c.inmux)]
				[if(p.sensitive) ]
				   [forSensitive(p.name, p.length.abs())/]
				[/if]
	   		[/for]
        }       
	};
	#endif
	
	[/file]

    [file (c.name.concat('_timed.h'), false, 'UTF-8')]
	#ifndef [c.name.concat('_h')/]
	#define  [c.name.concat('_h')/]
	#include "systemc.h"
	
	SC_MODULE([c.name/]){
	 	[for (p : Input | c.inmux)]
	    	[forIn(p.name, p.type.toString(), p.bit, p.length) /]	    
	    [/for]
		[for (p : Output | c.outmux)]
	    	[forOut(p.name, p.type.toString(), p.bit, p.length) /]	    
	    [/for]
		[for (p : Seletor | c.seletormux)]
	    	[forSel(p.name, p.type.toString(), p.bit) /]	    
	    [/for]
        [for (o : Behavior | c.behaviormux)]
        	[o.typeBehavior.toString().toLower()/] [o.name.toLower()/](); 
        [/for]
		SC_CTOR([c.name/]) {
			[for (o : Behavior | c.behaviormux)]
	        	SC_THREAD([o.name.toLower()/]); 
	        [/for]
			[for (p : Input | c.inmux)]
	        	[if(p.sensitive) ]
				   [forSensitive(p.name, p.length.abs())/]
				[/if]
				
	   		[/for]
        }       
	};
	#endif
	
	[/file]
[/template]
