[comment encoding = UTF-8 /]
[module gensystemc('http://www.eclipse.org/emf/2002/Ecore')/]

[template public gensystemc(aEClass : EClass)]
	
	[comment @main /]
	[file (aEClass.name.concat('.h'), false, 'UTF-8')]
	#ifndef [aEClass.name.concat('_h')/]
	#define  [aEClass.name.concat('_h')/]
	#include "systemc.h"
	
	SC_MODULE 
	[aEClass.name/]
	[/file]
	
[/template]

#ifndef Multiplexer_h
#define Multiplexer_h
#include <systemc.h>
#include "config.h"

SC_MODULE (Multiplexer) {
	// Memory output, Register file output, PC, IR
	sc_in<sc_int<WORD_SIZE> > *inputs; 
	sc_in<sc_int<WORD_SIZE> > sel;

	sc_out<sc_int<WORD_SIZE> > output;

	int numInputs;

	void multiplexerBehavior();

	SC_HAS_PROCESS (Multiplexer);
	Multiplexer(sc_module_name name, int numInputs) : sc_module(name){
		SC_METHOD(multiplexerBehavior);
		sensitive << sel;
		inputs = new sc_in<sc_int<WORD_SIZE> >[numInputs];
		this->numInputs = numInputs;
		for(int i=0;i<numInputs;i++)
			sensitive<<inputs[i];
	}

};
#endif



[module generate('http://www.eclipse.org/uml2/2.1.0/UML')/]

[template public generate(c : Class)]
        [file (c.name.concat('.h'), false)]
        public class [c.name.toUpperFirst()/] {
        [for (p : Property | c.attribute)]
        private [p.type.name/] [p.name/];
        [/for]
        [for (p : Property | c.attribute)]
        public [p.type.name/] get[p.name.toUpperFirst()/]() {
                return this.[p.name/];
        }
        [/for]
        [for (o : Operation | c.ownedOperation)]
        public [o.type.name/] [o.name/]() {
                // TODO should be implemented
        }
        [/for]
        }
        [/file]
[/template]