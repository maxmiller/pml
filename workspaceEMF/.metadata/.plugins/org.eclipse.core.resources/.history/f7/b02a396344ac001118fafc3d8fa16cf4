/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package pml.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.EObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import pml.Behavior;
import pml.Demultiplexor;
import pml.Input;
import pml.Output;
import pml.PmlPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Demultiplexor</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * <ul>
 *   <li>{@link pml.impl.DemultiplexorImpl#getBehaviorsDemux <em>Behaviors Demux</em>}</li>
 *   <li>{@link pml.impl.DemultiplexorImpl#getIndemux <em>Indemux</em>}</li>
 *   <li>{@link pml.impl.DemultiplexorImpl#getOutdemux <em>Outdemux</em>}</li>
 *   <li>{@link pml.impl.DemultiplexorImpl#getName <em>Name</em>}</li>
 * </ul>
 * </p>
 *
 * @generated
 */
public class DemultiplexorImpl extends EObjectImpl implements Demultiplexor {
	/**
	 * The cached value of the '{@link #getBehaviorsDemux() <em>Behaviors Demux</em>}' containment reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getBehaviorsDemux()
	 * @generated
	 * @ordered
	 */
	protected EList<Behavior> behaviorsDemux;

	/**
	 * The cached value of the '{@link #getIndemux() <em>Indemux</em>}' containment reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getIndemux()
	 * @generated
	 * @ordered
	 */
	protected EList<Input> indemux;

	/**
	 * The cached value of the '{@link #getOutdemux() <em>Outdemux</em>}' containment reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getOutdemux()
	 * @generated
	 * @ordered
	 */
	protected EList<Output> outdemux;

	/**
	 * The default value of the '{@link #getName() <em>Name</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getName()
	 * @generated
	 * @ordered
	 */
	protected static final String NAME_EDEFAULT = null;

	/**
	 * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getName()
	 * @generated
	 * @ordered
	 */
	protected String name = NAME_EDEFAULT;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DemultiplexorImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	protected EClass eStaticClass() {
		return PmlPackage.Literals.DEMULTIPLEXOR;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EList<Behavior> getBehaviorsDemux() {
		if (behaviorsDemux == null) {
			behaviorsDemux = new EObjectContainmentEList<Behavior>(Behavior.class, this, PmlPackage.DEMULTIPLEXOR__BEHAVIORS_DEMUX);
		}
		return behaviorsDemux;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EList<Input> getIndemux() {
		if (indemux == null) {
			indemux = new EObjectContainmentEList<Input>(Input.class, this, PmlPackage.DEMULTIPLEXOR__INDEMUX);
		}
		return indemux;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EList<Output> getOutdemux() {
		if (outdemux == null) {
			outdemux = new EObjectContainmentEList<Output>(Output.class, this, PmlPackage.DEMULTIPLEXOR__OUTDEMUX);
		}
		return outdemux;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public String getName() {
		return name;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setName(String newName) {
		String oldName = name;
		name = newName;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, PmlPackage.DEMULTIPLEXOR__NAME, oldName, name));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case PmlPackage.DEMULTIPLEXOR__BEHAVIORS_DEMUX:
				return ((InternalEList<?>)getBehaviorsDemux()).basicRemove(otherEnd, msgs);
			case PmlPackage.DEMULTIPLEXOR__INDEMUX:
				return ((InternalEList<?>)getIndemux()).basicRemove(otherEnd, msgs);
			case PmlPackage.DEMULTIPLEXOR__OUTDEMUX:
				return ((InternalEList<?>)getOutdemux()).basicRemove(otherEnd, msgs);
		}
		return super.eInverseRemove(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
			case PmlPackage.DEMULTIPLEXOR__BEHAVIORS_DEMUX:
				return getBehaviorsDemux();
			case PmlPackage.DEMULTIPLEXOR__INDEMUX:
				return getIndemux();
			case PmlPackage.DEMULTIPLEXOR__OUTDEMUX:
				return getOutdemux();
			case PmlPackage.DEMULTIPLEXOR__NAME:
				return getName();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@SuppressWarnings("unchecked")
	@Override
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case PmlPackage.DEMULTIPLEXOR__BEHAVIORS_DEMUX:
				getBehaviorsDemux().clear();
				getBehaviorsDemux().addAll((Collection<? extends Behavior>)newValue);
				return;
			case PmlPackage.DEMULTIPLEXOR__INDEMUX:
				getIndemux().clear();
				getIndemux().addAll((Collection<? extends Input>)newValue);
				return;
			case PmlPackage.DEMULTIPLEXOR__OUTDEMUX:
				getOutdemux().clear();
				getOutdemux().addAll((Collection<? extends Output>)newValue);
				return;
			case PmlPackage.DEMULTIPLEXOR__NAME:
				setName((String)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void eUnset(int featureID) {
		switch (featureID) {
			case PmlPackage.DEMULTIPLEXOR__BEHAVIORS_DEMUX:
				getBehaviorsDemux().clear();
				return;
			case PmlPackage.DEMULTIPLEXOR__INDEMUX:
				getIndemux().clear();
				return;
			case PmlPackage.DEMULTIPLEXOR__OUTDEMUX:
				getOutdemux().clear();
				return;
			case PmlPackage.DEMULTIPLEXOR__NAME:
				setName(NAME_EDEFAULT);
				return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean eIsSet(int featureID) {
		switch (featureID) {
			case PmlPackage.DEMULTIPLEXOR__BEHAVIORS_DEMUX:
				return behaviorsDemux != null && !behaviorsDemux.isEmpty();
			case PmlPackage.DEMULTIPLEXOR__INDEMUX:
				return indemux != null && !indemux.isEmpty();
			case PmlPackage.DEMULTIPLEXOR__OUTDEMUX:
				return outdemux != null && !outdemux.isEmpty();
			case PmlPackage.DEMULTIPLEXOR__NAME:
				return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
		}
		return super.eIsSet(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public String toString() {
		if (eIsProxy()) return super.toString();

		StringBuffer result = new StringBuffer(super.toString());
		result.append(" (name: ");
		result.append(name);
		result.append(')');
		return result.toString();
	}

} //DemultiplexorImpl
